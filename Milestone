{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNN3VSC0yp/RgNCLsboxPUK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Philipof/PredictiveAnalytics/blob/master/Milestone\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "gmFNZf1-Xnaz",
        "outputId": "7db6ae2c-02c4-46a8-e674-1b72e0d395a9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-249951b5-b18d-4d52-8f07-2131d5ee308b\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-249951b5-b18d-4d52-8f07-2131d5ee308b\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving heart.csv to heart (1).csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        " \n",
        " \n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "AKZMJNxcZoMt"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"heart.csv\")"
      ],
      "metadata": {
        "id": "rQaQR7gEZoxz"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hz9sMEj2GTJv",
        "outputId": "8cf8f2df-26a5-49cc-a1fd-f52fc1dc3812"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(918, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ioc4zcd2Zo84",
        "outputId": "fded2707-abbc-49db-9a52-b007dbad7075"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
              "0   40   M           ATA        140          289          0     Normal    172   \n",
              "1   49   F           NAP        160          180          0     Normal    156   \n",
              "2   37   M           ATA        130          283          0         ST     98   \n",
              "3   48   F           ASY        138          214          0     Normal    108   \n",
              "4   54   M           NAP        150          195          0     Normal    122   \n",
              "\n",
              "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
              "0              N      0.0       Up             0  \n",
              "1              N      1.0     Flat             1  \n",
              "2              N      0.0       Up             0  \n",
              "3              Y      1.5     Flat             1  \n",
              "4              N      0.0       Up             0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d3504ba-96eb-4cb1-8892-d2a146d84a86\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>ChestPainType</th>\n",
              "      <th>RestingBP</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>FastingBS</th>\n",
              "      <th>RestingECG</th>\n",
              "      <th>MaxHR</th>\n",
              "      <th>ExerciseAngina</th>\n",
              "      <th>Oldpeak</th>\n",
              "      <th>ST_Slope</th>\n",
              "      <th>HeartDisease</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>140</td>\n",
              "      <td>289</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>172</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>F</td>\n",
              "      <td>NAP</td>\n",
              "      <td>160</td>\n",
              "      <td>180</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>156</td>\n",
              "      <td>N</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>130</td>\n",
              "      <td>283</td>\n",
              "      <td>0</td>\n",
              "      <td>ST</td>\n",
              "      <td>98</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>48</td>\n",
              "      <td>F</td>\n",
              "      <td>ASY</td>\n",
              "      <td>138</td>\n",
              "      <td>214</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>108</td>\n",
              "      <td>Y</td>\n",
              "      <td>1.5</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54</td>\n",
              "      <td>M</td>\n",
              "      <td>NAP</td>\n",
              "      <td>150</td>\n",
              "      <td>195</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>122</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d3504ba-96eb-4cb1-8892-d2a146d84a86')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1d3504ba-96eb-4cb1-8892-d2a146d84a86 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1d3504ba-96eb-4cb1-8892-d2a146d84a86');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5D4QLr7Z-C-k",
        "outputId": "406e72dd-847b-4fe5-9107-95395db6e57b"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.info of      Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  \\\n",
              "0     40   M           ATA        140          289          0     Normal   \n",
              "1     49   F           NAP        160          180          0     Normal   \n",
              "2     37   M           ATA        130          283          0         ST   \n",
              "3     48   F           ASY        138          214          0     Normal   \n",
              "4     54   M           NAP        150          195          0     Normal   \n",
              "..   ...  ..           ...        ...          ...        ...        ...   \n",
              "913   45   M            TA        110          264          0     Normal   \n",
              "914   68   M           ASY        144          193          1     Normal   \n",
              "915   57   M           ASY        130          131          0     Normal   \n",
              "916   57   F           ATA        130          236          0        LVH   \n",
              "917   38   M           NAP        138          175          0     Normal   \n",
              "\n",
              "     MaxHR ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
              "0      172              N      0.0       Up             0  \n",
              "1      156              N      1.0     Flat             1  \n",
              "2       98              N      0.0       Up             0  \n",
              "3      108              Y      1.5     Flat             1  \n",
              "4      122              N      0.0       Up             0  \n",
              "..     ...            ...      ...      ...           ...  \n",
              "913    132              N      1.2     Flat             1  \n",
              "914    141              N      3.4     Flat             1  \n",
              "915    115              Y      1.2     Flat             1  \n",
              "916    174              N      0.0     Flat             1  \n",
              "917    173              N      0.0       Up             0  \n",
              "\n",
              "[918 rows x 12 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RXLmv_Zy-Hcc",
        "outputId": "324847b2-c387-47a3-a125-1148d5848ba0"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.describe of      Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  \\\n",
              "0     40   M           ATA        140          289          0     Normal   \n",
              "1     49   F           NAP        160          180          0     Normal   \n",
              "2     37   M           ATA        130          283          0         ST   \n",
              "3     48   F           ASY        138          214          0     Normal   \n",
              "4     54   M           NAP        150          195          0     Normal   \n",
              "..   ...  ..           ...        ...          ...        ...        ...   \n",
              "913   45   M            TA        110          264          0     Normal   \n",
              "914   68   M           ASY        144          193          1     Normal   \n",
              "915   57   M           ASY        130          131          0     Normal   \n",
              "916   57   F           ATA        130          236          0        LVH   \n",
              "917   38   M           NAP        138          175          0     Normal   \n",
              "\n",
              "     MaxHR ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
              "0      172              N      0.0       Up             0  \n",
              "1      156              N      1.0     Flat             1  \n",
              "2       98              N      0.0       Up             0  \n",
              "3      108              Y      1.5     Flat             1  \n",
              "4      122              N      0.0       Up             0  \n",
              "..     ...            ...      ...      ...           ...  \n",
              "913    132              N      1.2     Flat             1  \n",
              "914    141              N      3.4     Flat             1  \n",
              "915    115              Y      1.2     Flat             1  \n",
              "916    174              N      0.0     Flat             1  \n",
              "917    173              N      0.0       Up             0  \n",
              "\n",
              "[918 rows x 12 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MzwHtGS0AIZJ",
        "outputId": "00d29b92-5ef8-4a60-e0ca-19f2b1c80e65"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS',\n",
            "       'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope',\n",
            "       'HeartDisease'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_features = df.columns.drop('HeartDisease')\n",
        "model_target = 'HeartDisease'\n",
        "\n",
        "print('Model features: ', model_features)\n",
        "print('Model target: ', model_target)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o5ofCwMdAMWE",
        "outputId": "27f154cd-8b8b-413e-adaa-bbf58e59d619"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model features:  Index(['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS',\n",
            "       'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope'],\n",
            "      dtype='object')\n",
            "Model target:  HeartDisease\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "numerical_features_all = df[model_features].select_dtypes(include=np.number).columns\n",
        "print('Numerical columns:',numerical_features_all)\n",
        "\n",
        "print('')\n",
        "\n",
        "categorical_features_all = df[model_features].select_dtypes(include='object').columns\n",
        "print('Categorical columns:',categorical_features_all)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-MsHJ6foAgYl",
        "outputId": "2a380fd8-52cc-4af3-d775-a91d3b91e4c2"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numerical columns: Index(['Age', 'RestingBP', 'Cholesterol', 'FastingBS', 'MaxHR', 'Oldpeak'], dtype='object')\n",
            "\n",
            "Categorical columns: Index(['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "df[model_target].value_counts().plot.bar()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 257
        },
        "id": "7dKkkJ3bDFfs",
        "outputId": "a4c52b90-4a52-4a9c-e6e8-d00d5ec86988"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "for c in numerical_features_all:\n",
        "    print(c)\n",
        "    df[c].plot.hist(bins=5)\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uv6kqeT7Ehui",
        "outputId": "4b630e5f-dbf1-442f-e18a-8b7ef1b1a27c"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Age\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RestingBP\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cholesterol\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX8AAAD1CAYAAAC4GPVtAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUHklEQVR4nO3dfbBdVXnH8W+MKCFRIzrlpoFKmWkfRZxpG8PrBMO7CkprUFpvkYId0ZKOAbETxjYQsMqQIq1K1dTIS8ApGseaEAQEq8YgMSog0PYRLDBiQsPAGAEzgUD6x95nPFxvyAlmnXtP1vczcydnr733ybOSm1/2XXudvSZs3boVSVJdXjTWBUiS+s/wl6QKGf6SVCHDX5IqZPhLUoVePNYF9CIiXgrMBNYDz4xxOZI0CCYC04C1mbl55M6BCH+a4F811kVI0gCaBXx3ZGPR8I+IScDdwIXALcBSmv+N1gOnZObmiBgG5gHPAoszc8kob7Ue4JprrmFoaKhkyZK0S3j44YcZHh6GNj9HKn3l//fAY+3rC4DLMvPLEfEx4PSIuApYABwIPAWsjYivZuZjI97nGYChoSH23nvvwiVL0i5l1KHyYjd8I+K1wP7AyrZpNrC8fb0COBo4iGY8amNmbgJWA4eVqkmS1Cg52+cS4Oyu7cldNx020NyIGAIe6Tqm0y5JKqhI+EfEe4DvZeb92zhkwg62S5J2olJj/scD+0XECcDewGbgiYiY1A7vTAfWtV/dd3CnA7cVqkmS1CoS/pl5cud1RJwPPAAcCswBrm5/vQFYA3w+IqYCW2jG++eVqEmS9Gv9/ITvecCpEbEK2BO4sv0pYD5wI3AzsDAzN/axJkmqUvEPeWXm+V2bx4yyfxmwrHQdkqRfG5RP+GoH7Tt/5fYP2sU8cNHxY12CNDB8sJskVcjwl6QKGf6SVCHDX5IqZPhLUoUMf0mqkOEvSRUy/CWpQoa/JFXI8JekChn+klQhw1+SKmT4S1KFDH9JqpDhL0kVMvwlqULFFnOJiD2AK4C9gN2BC4GTgBnAo+1hizJzZUQM06zd+yywODOXlKpLklR2Ja+3AT/IzIsj4jXAN4BbgXMz87rOQRExGVgAHAg8BayNiK9m5mMFa5OkqhUL/8y8tmtzH+ChbRx6ELC2s3B7RKwGDgNWlKpNkmpXfA3fiLgV2Bs4ATgbmBsRZwMbgLnAEPBI1ykbgGml65KkmhW/4ZuZhwJvB64GlgLzM/NI4A7g/FFOmVC6JkmqXbHwj4gZEbEPQGbeQfNTxl3ta4DlwBuAdTRX/x3T2zZJUiElr/wPBz4EEBF7AVOAz0XEfu3+2cDdwBpgZkRMjYgpNOP9qwrWJUnVKznm/1lgSUSsAiYBZwJPANdGxK/a16dl5qaImA/cCGwFFnZu/kqSyig522cT8O5Rds0c5dhlwLJStUiSnstP+EpShQx/SaqQ4S9JFTL8JalChr8kVcjwl6QKFX+2j9Qv+85fOdYl9NUDFx0/1iVogHnlL0kVMvwlqUKGvyRVyPCXpAoZ/pJUIcNfkipk+EtShQx/SaqQ4S9JFTL8JalChr8kVajYs30iYg/gCmAvYHfgQuBOYCkwEVgPnJKZmyNiGJgHPAsszswlpeqSJJW98n8b8IPMfBPwLuATwAXAZZk5C7gPOD0iJgMLgKOB2cBZEbFnwbokqXolF3C/tmtzH+AhmnB/f9u2AjgHSGBtZm4EiIjVwGHtfklSAcUf6RwRtwJ7AycAN2fm5nbXBmAaMAQ80nVKp12SVEjxG76ZeSjwduBqYELXrgmjn7HNdknSTlIs/CNiRkTsA5CZd9D8lPF4RExqD5kOrGu/hrpO7bRLkgopeeV/OPAhgIjYC5gC3AzMaffPAW4A1gAzI2JqREyhGe9fVbAuSapeyfD/LPA7EbEKWAmcCZwHnNq27QlcmZmbgPnAjTT/OSzs3PyVJJVRcrbPJuDdo+w6ZpRjlwHLStUiSXouP+ErSRUy/CWpQoa/JFXI8JekChn+klQhw1+SKmT4S1KFDH9JqpDhL0kVMvwlqUKGvyRVyPCXpAoZ/pJUIcNfkipk+EtShQx/SaqQ4S9JFTL8JalCxZZxBIiIi4FZ7e/zceDtwAzg0faQRZm5MiKGgXnAs8DizFxSsi5Jql2x8I+II4ADMvOQiHgVcDvwTeDczLyu67jJwALgQOApYG1EfDUzHytVmyTVruSwz3eAd7avfwFMBiaOctxBwNrM3Ngu+r4aOKxgXZJUvWJX/pn5DPBku/le4HrgGWBuRJwNbADmAkPAI12nbgCmlapLktSHG74RcSJN+M8FlgLzM/NI4A7g/FFOmVC6JkmqXU9X/hHxosx8dkffPCKOAz4CvDkzNwK3dO1eDnwGWEZz9d8xHbhtR38vSVLver3y/0lEfDIiDur1jSPiFcAi4ITOzduI+EpE7NceMhu4G1gDzIyIqRExhWa8f1Wvv48kacf1Oua/P3AUcFpELAK+BXwxM//nec45GXg18KWI6LRdDlwbEb8CngBOy8xNETEfuBHYCixsf0qQJBXSU/hn5lPA1yPiJuBo4ALgLyLifuCszLxnlHMWA4tHebsrRzl2Gc3wjySpD3od8z8C+HOaIZmbgA9k5o8i4g+BLwJvLFeiJGln63XY5wzgKuBv2imcAGTmTyLi34pUJkkqptcbvhcCB3WCPyI+FRGvB8jMz5UqTpJURq/h/xngG13bXwD+deeXI0nqh17Df7fM/G5nIzNvxw9jSdLA6nXMf01ELKN57s6LgCOA7xerSpJUVE9X/pk5j2bo58U0j12+KDPPKVmYJKmcnsI/IvYGXg/sDrwMODIiFpQsTJJUTq9j/itonrT5GM1CLJ0vSdIA6nXM/9HMPLdoJZKkvuk1/L8ZEWfSPHBtS6cxM/+rSFWSpKJ6Df9j2l9P6mrbChy5c8uRJPVDrw92OwIgInbLzKfLliRJKq3X2T6zI+JO4K52+x8j4tiilUmSiul1ts8FNEM869vtfwEWFqlIklRcr+H/dGY+SjPOT2ZuoPmwlyRpAPV6w/f+iLgAeHVEnAz8KeBMH0kaUL2G//uAdwPfBQ6mWXz92u2dFBEXA7Pa3+fjwFpgKTCRZgjplMzcHBHDwDyanyYWZ+aSHeyHJGkH9Drs85ftsbcBtwO7tW3b1K7+dUBmHgK8GfhnmnsHl2XmLOA+4PSImAwsoFkecjZwVkTsueNdkST1qtcr/zd0vd6N5ur/bprVvbblO/z6yZ+/ACbThPv727YVwDlAAms7i7ZHxGqa5SJX9FibJGkH9TrP/8Pd2xExke0suN6u+vVku/le4HrguMzc3LZtoHle0BDwSNepnXZJUiG9LuC+x4imacBrezz3RJrwPxa4t2vXthaDcZEYSSqs1zH/e7q+7qa56r9keydFxHHAR4C3tMM6T0TEpHb3dGBd+zXUdVqnXZJUSK/DPr+/o28cEa8AFgFHZ+ZjbfPNwBzg6vbXG4A1wOcjYirNQ+MOo5n5I0kqpNdhn//dxq4JwNbM3G+UfScDrwa+FBGdtlNpgv4M4EHgysx8OiLmAzfSfIhsYefmrySpjF5n+yyl+VDXt2iuzo+hmQH0sW2dkJmLgcWj7DpmlGOXsZ0byJKknafX8D8iM8/r2v73iHh/Zj65zTMkSeNWr+G/uf207m00QzMH47N9JGlg9Trb5x3AA8ARwFHAz4A/K1STJKmwnsI/Mx8H7gBWZ+Zc4CvelJWkwdXrYi6LgA8CnU/6nhERnyxWlSSpqF6Hfd6YmScDvwTIzPOBPy5VlCSprF7Df7eI2I12MZeIeDWwe7GqJElF9Trb5xKamT6/FxFfB17HAH0Kd9/5K8e6BEkaV3oN/weAw4HXA08BmZmbShUlSSprR678j83M72/3SEnSuNdr+D8J3BsRd9Jc+QOQme8qUpUkqajnDf+I+ERmng38U9t0GLC6eFWSpKK2d+X/RwCZ+W2AiDgvM7f5MDdJ0mDY3lTPkatqucqWJO0Cthf+W7ezLUkaQNsb9nljRHRm+EwAot3uLOJyYNHqJElFbC/839CXKiRJffW84Z+ZD/arEElS//Q6z/8FiYgDgK8Bl2bmpyPiCmAG8Gh7yKLMXBkRwzSPi3gWWJyZS0rWJUm1Kxb+ETEZ+BRwy4hd52bmdSOOWwAcSPMBsrUR8dXMfKxUbZJUu16f6vlCbAbeCqzbznEHAWszc2P7vKDVNB8mkyQVUuzKPzO3AFsiYuSuuRFxNrABmAsMAY907d8ATCtVlySp7JX/aJYC8zPzSJplIc8f5Rg/SCZJhRW94TtSZnaP/y8HPgMso7n675hOs3aAJKmQvl75R8RXImK/dnM2cDewBpgZEVMjYgrNeP+qftYlSbUpOdtnBs06APsCT0fESTSzf66NiF8BTwCnZeamiJgP3Ejz+IiFmbmxVF2SpLI3fH9Ic3U/0ldGOXYZzfCPJKkP+n3DV5I0Dhj+klQhw1+SKmT4S1KFDH9JqpDhL0kVMvwlqUKGvyRVyPCXpAoZ/pJUIcNfkipk+EtShQx/SaqQ4S9JFTL8JalChr8kVcjwl6QKFV3APSIOAL4GXJqZn46IfYClwERgPXBKZm6OiGFgHvAssDgzl5SsS5JqV+zKPyIm06zZe0tX8wXAZZk5C7gPOL09bgFwNM2yj2dFxJ6l6pIklR322Qy8FVjX1TYbWN6+XkET+AcBazNzY2ZuAlYDhxWsS5KqV3IB9y3Alojobp6cmZvb1xuAacAQ8EjXMZ12SVIhY3nDd8IOtkuSdpJ+h/8TETGpfT2dZkhoHc3VPyPaJUmF9Dv8bwbmtK/nADcAa4CZETE1IqbQjPev6nNdklSVYmP+ETEDuATYF3g6Ik4ChoErIuIM4EHgysx8OiLmAzcCW4GFmbmxVF2SpLI3fH9IM7tnpGNGOXYZsKxULZKk5/ITvpJUIcNfkipk+EtShQx/SaqQ4S9JFTL8JalChr8kVcjwl6QKGf6SVCHDX5IqZPhLUoUMf0mqkOEvSRUy/CWpQoa/JFXI8JekChn+klQhw1+SKlRsGcfRRMRs4MvAPW3TXcDFwFJgIrAeOCUzN/ezLkmqzVhc+X87M2e3X38LXABclpmzgPuA08egJkmqyngY9pkNLG9frwCOHrtSJKkOfR32ae0fEcuBPYGFwOSuYZ4NwLQxqEmSqtLv8L+XJvC/BOwH/OeIGib0uR5JqlJfwz8zfw5c227+NCIeBmZGxKTM3ARMB9b1syZJqlFfx/wjYjgizmlfDwF7AZcDc9pD5gA39LMmSapRv4d9lgNfjIgTgZcAHwBuB66KiDOAB4Er+1yTJFWn38M+jwNvG2XXMf2sQ5JqNx6mekqS+szwl6QKGf6SVCHDX5IqZPhLUoUMf0mqkOEvSRUy/CWpQoa/JFXI8JekChn+klQhw1+SKjQWK3lJ2gn2nb9yrEvouwcuOn6sS9hleOUvSRUy/CWpQoa/JFXI8JekChn+klShcTPbJyIuBQ4GtgIfzMy1Y1ySJO2yxkX4R8SbgD/IzEMi4nXAF4BDxrgsSeOM01t3nnER/sBRwH8AZOZ/R8QrI+LlmfnLdv9EgIcffviFvfuTj+2MGiWp7x566KEXdF5XXk4cbf94Cf8h4Idd24+0bZ3wnwYwPDz8gt78pb9NZZI0ho666aO/7VtMA346snG8hP9IE0ZsrwVmAeuBZ/pfjiQNnIk0wT/q/dPxEv7raK70O36XJugByMzNwHf7XZQkDbjfuOLvGC9TPW8CTgKIiD8B1mXm42NbkiTtuiZs3bp1rGsAICIuAg4HngXOzMw7d8J7DuT00Yg4APgacGlmfjoi9gGW0vwYtx44JTM3R8QwMI/mz2xxZi4Zs6JHEREX0wzXvRj4OM2PnwPVj4jYA7gC2AvYHbgQuJMB60e3iJgE3E3Tl1sYsL5ExGzgy8A9bdNdwMUMWD862hr/DtgCLAB+TB/6Mm7Cf2drp49+ODNP6EwfzcxxP300IiYD1wH3Aj9uw/9y4PrM/HJEfAz4GXAV8CPgQOApmmA9PDPHxdSmiDiC5s//rRHxKuB2mqAZtH6cDLwmMy+OiNcA3wBWM2D96BYR/wgcC1wGvIkB60sb/nMz86SutoH7NwLQ/tv4HjADmAIsBHajD30ZL8M+JTxn+ijwyoh4+diW1JPNwFtp7oN0zAaWt69XAEcDBwFrM3NjZm6iCaTD+ljn9nwHeGf7+hfAZAawH5l5bWZe3G7uAzzEAPajIyJeC+wPdCbMz2ZA+zLCbAazH0cDN2fm45m5PjPfR5/6Ml5u+Jawvemj41JmbgG2RER38+T2pjfABpo7+EM0fWJE+7iQmc8AT7ab7wWuB44btH50RMStwN7ACTT/WAeyH8AlwFzg1HZ74L63WvtHxHJgT5qr5UHtx77AHm1fXgmcT5/6sitf+Y80cvrooNpWP8Zl/yLiRJrwnzti10D1IzMPBd4OXM1zaxyYfkTEe4DvZeb92zhkUPpyL03gn0jzn9gSnnshOyj9gKamVwHvAP4KuJw+fX/tyuH/vNNHB8wT7U06gOk0fRvZv077uBERxwEfAd6SmRsZwH5ExIz2hjuZeQdNyDw+aP1oHQ+cGBG3AX8N/AMD+HeSmT9vh+O2ZuZPgYdphnUHqh+t/wNuzcwtbV8ep0/fX7ty+O9K00dvBua0r+cANwBrgJkRMTUiptCM/60ao/p+Q0S8AlgEnNB1U2rg+kEzA+1DABGxF81NuUHsB5l5cmbOzMyDgc/TzPYZuL5ExHBEnNO+HqKZiXU5A9aP1k3AkRHxovbmb9++v3bZ2T5QZvpoaRExg2Zcdl/gaeDnwDDNdMPdgQeB0zLz6Yg4CfgwzVTWT2XmNWNR82gi4n0045c/6Wo+lSZ0Bqkfk2iGFfYBJtEMN/yAZvbFwPRjpIg4H3gAuJEB60tEvAz4IjAVeAnN38ntDFg/OiLiDJqhUYCP0szkKd6XXTr8JUmj25WHfSRJ22D4S1KFDH9JqpDhL0kVMvwlqUKGvyRVyPCXpAoZ/pJUof8HwNt6HvPm2c8AAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "FastingBS\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MaxHR\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Oldpeak\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, drop_first=True)"
      ],
      "metadata": {
        "id": "m8laJgTzFPwx"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BK-s_IH0GMXH",
        "outputId": "ac6e464a-8fad-4fa3-d2a8-2c9e95336cfd"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(918, 16)"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "BmSfOzIXGcIc",
        "outputId": "3a11be91-b6f7-4cf3-88f3-635784ec6988"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  RestingBP  Cholesterol  FastingBS  MaxHR  Oldpeak  HeartDisease  \\\n",
              "0   40        140          289          0    172      0.0             0   \n",
              "1   49        160          180          0    156      1.0             1   \n",
              "2   37        130          283          0     98      0.0             0   \n",
              "3   48        138          214          0    108      1.5             1   \n",
              "4   54        150          195          0    122      0.0             0   \n",
              "\n",
              "   Sex_M  ChestPainType_ATA  ChestPainType_NAP  ChestPainType_TA  \\\n",
              "0      1                  1                  0                 0   \n",
              "1      0                  0                  1                 0   \n",
              "2      1                  1                  0                 0   \n",
              "3      0                  0                  0                 0   \n",
              "4      1                  0                  1                 0   \n",
              "\n",
              "   RestingECG_Normal  RestingECG_ST  ExerciseAngina_Y  ST_Slope_Flat  \\\n",
              "0                  1              0                 0              0   \n",
              "1                  1              0                 0              1   \n",
              "2                  0              1                 0              0   \n",
              "3                  1              0                 1              1   \n",
              "4                  1              0                 0              0   \n",
              "\n",
              "   ST_Slope_Up  \n",
              "0            1  \n",
              "1            0  \n",
              "2            1  \n",
              "3            0  \n",
              "4            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f3507a77-de4b-49c3-8dc9-c10e571a8e36\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>RestingBP</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>FastingBS</th>\n",
              "      <th>MaxHR</th>\n",
              "      <th>Oldpeak</th>\n",
              "      <th>HeartDisease</th>\n",
              "      <th>Sex_M</th>\n",
              "      <th>ChestPainType_ATA</th>\n",
              "      <th>ChestPainType_NAP</th>\n",
              "      <th>ChestPainType_TA</th>\n",
              "      <th>RestingECG_Normal</th>\n",
              "      <th>RestingECG_ST</th>\n",
              "      <th>ExerciseAngina_Y</th>\n",
              "      <th>ST_Slope_Flat</th>\n",
              "      <th>ST_Slope_Up</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40</td>\n",
              "      <td>140</td>\n",
              "      <td>289</td>\n",
              "      <td>0</td>\n",
              "      <td>172</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>160</td>\n",
              "      <td>180</td>\n",
              "      <td>0</td>\n",
              "      <td>156</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>130</td>\n",
              "      <td>283</td>\n",
              "      <td>0</td>\n",
              "      <td>98</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>48</td>\n",
              "      <td>138</td>\n",
              "      <td>214</td>\n",
              "      <td>0</td>\n",
              "      <td>108</td>\n",
              "      <td>1.5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54</td>\n",
              "      <td>150</td>\n",
              "      <td>195</td>\n",
              "      <td>0</td>\n",
              "      <td>122</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3507a77-de4b-49c3-8dc9-c10e571a8e36')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f3507a77-de4b-49c3-8dc9-c10e571a8e36 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f3507a77-de4b-49c3-8dc9-c10e571a8e36');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_data, test_data = train_test_split(df, test_size=0.1, shuffle=True, random_state=23)"
      ],
      "metadata": {
        "id": "0cgYbXTpG3ou"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('Training set shape:', train_data.shape)\n",
        "\n",
        "print('Class 0 samples in the training set:', sum(train_data[model_target] == 0))\n",
        "print('Class 1 samples in the training set:', sum(train_data[model_target] == 1))\n",
        "\n",
        "print('Class 0 samples in the test set:', sum(test_data[model_target] == 0))\n",
        "print('Class 1 samples in the test set:', sum(test_data[model_target] == 1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-8_ydj8XK-F1",
        "outputId": "a0f30862-3427-411f-c9c7-6aeb73a708d6"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set shape: (826, 16)\n",
            "Class 0 samples in the training set: 367\n",
            "Class 1 samples in the training set: 459\n",
            "Class 0 samples in the test set: 43\n",
            "Class 1 samples in the test set: 49\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.utils import shuffle\n",
        "\n",
        "class_0_no = train_data[train_data[model_target] == 0]\n",
        "class_1_no = train_data[train_data[model_target] == 1]\n",
        "\n",
        "upsampled_class_0_no = class_0_no.sample(n=len(class_1_no), replace=True, random_state=42)\n",
        "\n",
        "train_data = pd.concat([class_1_no, upsampled_class_0_no])\n",
        "train_data = shuffle(train_data)"
      ],
      "metadata": {
        "id": "mATSkY9vK-OV"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('Training set shape:', train_data.shape)\n",
        "\n",
        "print('Class 1 samples in the training set:', sum(train_data[model_target] == 1))\n",
        "print('Class 0 samples in the training set:', sum(train_data[model_target] == 0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xo0KJoSmK-X8",
        "outputId": "1e0bc96c-a3f1-4623-fac1-873fb0c670f3"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set shape: (918, 16)\n",
            "Class 1 samples in the training set: 459\n",
            "Class 0 samples in the training set: 459\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "### PIPELINE ###\n",
        "################\n",
        "\n",
        "# Pipeline desired data transformers, along with an estimator at the end\n",
        "# For each step specify: a name, the actual transformer/estimator with its parameters\n",
        "classifier = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', MinMaxScaler()),\n",
        "    ('estimator', KNeighborsClassifier(n_neighbors = 3))\n",
        "])\n",
        "\n",
        "# Visualize the pipeline\n",
        "# This will come in handy especially when building more complex pipelines, stringing together multiple preprocessing steps\n",
        "from sklearn import set_config\n",
        "set_config(display='diagram')\n",
        "classifier"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "id": "-8hCvAu6K-qv",
        "outputId": "67919b53-b798-4c22-edde-fbcf24a066f9"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('imputer', SimpleImputer()), ('scaler', MinMaxScaler()),\n",
              "                ('estimator', KNeighborsClassifier(n_neighbors=3))])"
            ],
            "text/html": [
              "<style>#sk-88bde00e-c997-4692-ad13-df7762ddd793 {color: black;background-color: white;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 pre{padding: 0;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-toggleable {background-color: white;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-estimator:hover {background-color: #d4ebff;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-item {z-index: 1;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-parallel-item:only-child::after {width: 0;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-88bde00e-c997-4692-ad13-df7762ddd793 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-88bde00e-c997-4692-ad13-df7762ddd793\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()), (&#x27;scaler&#x27;, MinMaxScaler()),\n",
              "                (&#x27;estimator&#x27;, KNeighborsClassifier(n_neighbors=3))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"9b0e5782-7e79-46a0-a215-3ec2afd68904\" type=\"checkbox\" ><label for=\"9b0e5782-7e79-46a0-a215-3ec2afd68904\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()), (&#x27;scaler&#x27;, MinMaxScaler()),\n",
              "                (&#x27;estimator&#x27;, KNeighborsClassifier(n_neighbors=3))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"139bc624-0f4c-4818-bbf9-752db29d3735\" type=\"checkbox\" ><label for=\"139bc624-0f4c-4818-bbf9-752db29d3735\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"f1c521ab-7c53-47b9-abd5-77eeb92cf7b5\" type=\"checkbox\" ><label for=\"f1c521ab-7c53-47b9-abd5-77eeb92cf7b5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MinMaxScaler</label><div class=\"sk-toggleable__content\"><pre>MinMaxScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"ffb227fc-cd9e-4096-83ca-d4b2c0303089\" type=\"checkbox\" ><label for=\"ffb227fc-cd9e-4096-83ca-d4b2c0303089\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get train data to train the classifier\n",
        "X_train = train_data[numerical_features_all]\n",
        "y_train = train_data[model_target]\n",
        "\n",
        "# Fit the classifier to training data\n",
        "# Train data going through the Pipeline it's first imputed, then scaled, and finally used to fit the estimator\n",
        "classifier.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "id": "G8mqBdYGK-19",
        "outputId": "d2031888-7a11-4984-e210-0d447772bfc0"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('imputer', SimpleImputer()), ('scaler', MinMaxScaler()),\n",
              "                ('estimator', KNeighborsClassifier(n_neighbors=3))])"
            ],
            "text/html": [
              "<style>#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 {color: black;background-color: white;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 pre{padding: 0;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-toggleable {background-color: white;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-item {z-index: 1;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-parallel-item:only-child::after {width: 0;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-9ec1d67e-e86f-47dd-824a-397aa5a788f9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()), (&#x27;scaler&#x27;, MinMaxScaler()),\n",
              "                (&#x27;estimator&#x27;, KNeighborsClassifier(n_neighbors=3))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"0a698abe-fd76-4e41-b5a6-004a362ffa20\" type=\"checkbox\" ><label for=\"0a698abe-fd76-4e41-b5a6-004a362ffa20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()), (&#x27;scaler&#x27;, MinMaxScaler()),\n",
              "                (&#x27;estimator&#x27;, KNeighborsClassifier(n_neighbors=3))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"a12ff3c6-9384-4c0a-b8f3-20ab69093c0b\" type=\"checkbox\" ><label for=\"a12ff3c6-9384-4c0a-b8f3-20ab69093c0b\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"8371b14b-2ddc-4cbe-a7ff-ac4cfbe4cbde\" type=\"checkbox\" ><label for=\"8371b14b-2ddc-4cbe-a7ff-ac4cfbe4cbde\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MinMaxScaler</label><div class=\"sk-toggleable__content\"><pre>MinMaxScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"7cf887e2-52a6-40b7-b5a3-cc58036e94ec\" type=\"checkbox\" ><label for=\"7cf887e2-52a6-40b7-b5a3-cc58036e94ec\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score\n",
        "\n",
        "# Use the fitted model to make predictions on the train dataset\n",
        "# Train data going through the Pipeline it's first imputed (with means from the train), scaled (with the min/max from the train data), and finally used to make predictions\n",
        "train_predictions = classifier.predict(X_train)\n",
        "\n",
        "print('Model performance on the train set:')\n",
        "print(confusion_matrix(y_train, train_predictions))\n",
        "print(classification_report(y_train, train_predictions))\n",
        "print(\"Train accuracy:\", accuracy_score(y_train, train_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PLYIzR7bL7HU",
        "outputId": "70e74a08-3226-4da5-9f50-7ad27439dea0"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model performance on the train set:\n",
            "[[430  29]\n",
            " [ 68 391]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.94      0.90       459\n",
            "           1       0.93      0.85      0.89       459\n",
            "\n",
            "    accuracy                           0.89       918\n",
            "   macro avg       0.90      0.89      0.89       918\n",
            "weighted avg       0.90      0.89      0.89       918\n",
            "\n",
            "Train accuracy: 0.8943355119825708\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score\n",
        "\n",
        "# Get test data to test the classifier\n",
        "X_test = test_data[numerical_features_all]\n",
        "y_test = test_data[model_target]\n",
        "\n",
        "# Use the fitted model to make predictions on the test dataset\n",
        "# Test data going through the Pipeline it's first imputed (with means from the train), scaled (with the min/max from the train data), and finally used to make predictions\n",
        "test_predictions = classifier.predict(X_test)\n",
        "\n",
        "print('Model performance on the test set:')\n",
        "print(confusion_matrix(y_test, test_predictions))\n",
        "print(classification_report(y_test, test_predictions))\n",
        "print(\"Test accuracy:\", accuracy_score(y_test, test_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jEVrhmZ7L_mm",
        "outputId": "09689fed-27f7-44ee-8d6b-5d16a4a86823"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model performance on the test set:\n",
            "[[28 15]\n",
            " [13 36]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.68      0.65      0.67        43\n",
            "           1       0.71      0.73      0.72        49\n",
            "\n",
            "    accuracy                           0.70        92\n",
            "   macro avg       0.69      0.69      0.69        92\n",
            "weighted avg       0.70      0.70      0.70        92\n",
            "\n",
            "Test accuracy: 0.6956521739130435\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "\n",
        "import pydot\n",
        "\n",
        "from six import StringIO \n",
        "\n",
        "from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier, export_graphviz\n",
        "from sklearn.ensemble import BaggingClassifier, RandomForestClassifier, BaggingRegressor, RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.metrics import mean_squared_error,confusion_matrix, classification_report\n",
        "\n"
      ],
      "metadata": {
        "id": "qBWaOWi3Qmv2"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop([\"HeartDisease\"], axis=1)\n",
        "y = df[\"HeartDisease\"]"
      ],
      "metadata": {
        "id": "z92D2S_UUNT3"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DT_classifier = DecisionTreeClassifier(max_depth=None, criterion='entropy',max_leaf_nodes=6, max_features=3, random_state=1)\n",
        "DT_classifier.fit(X,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "id": "FoGzEc9pURAM",
        "outputId": "1e2654b1-b2df-41ed-d367-ae0f7e0a2339"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(criterion='entropy', max_features=3, max_leaf_nodes=6,\n",
              "                       random_state=1)"
            ],
            "text/html": [
              "<style>#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 {color: black;background-color: white;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 pre{padding: 0;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-toggleable {background-color: white;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-item {z-index: 1;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-parallel-item:only-child::after {width: 0;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-f936747e-c788-4b22-9b8a-92d04e4ab5a6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_features=3, max_leaf_nodes=6,\n",
              "                       random_state=1)</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"35d4ec35-b8f1-4e7c-a1d1-88cec7f1e497\" type=\"checkbox\" checked><label for=\"35d4ec35-b8f1-4e7c-a1d1-88cec7f1e497\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_features=3, max_leaf_nodes=6,\n",
              "                       random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DT_classifier.score(X,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fTfGukH0URI0",
        "outputId": "26a01017-b09b-4337-bb89-86168dccb1da"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8485838779956427"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def print_tree(estimator, features, class_names=None, filled=True):\n",
        "    tree = estimator\n",
        "    names = features\n",
        "    color = filled\n",
        "    classn = class_names\n",
        "    \n",
        "    dot_data = StringIO()\n",
        "    export_graphviz(estimator, out_file=dot_data, feature_names=features, class_names=classn, filled=filled)\n",
        "    graph = pydot.graph_from_dot_data(dot_data.getvalue())\n",
        "    return(graph)"
      ],
      "metadata": {
        "id": "zCFxjzPjUx_N"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "graph, = print_tree(DT_classifier, features=X.columns, class_names=['No', 'Yes'])\n",
        "Image(graph.create_png())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 912
        },
        "id": "JrWcA7aYQcEY",
        "outputId": "d1acfa9b-ce1a-493d-f4be-5169059394d0"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    }
  ]
}